class Network
types
	public NetworkFee = real inv f == f >= 0.0 and f <= 1.0;
	public NetworkDiscount = real	inv d == d >= 0.0 and d <= 1.0;
	public NetworkCredits = real inv c == c >= 0.0;
	public Currency = <Money> | <Credit>;
	public ProductName = Product`ProductName;
	public MerchantName = User`UserName;	
	public CustomerName = User`UserName;
values

instance variables
	public merchants: map MerchantName to Merchant := {|->};
	public customers: map CustomerName to Customer := {|->};
operations
	public addCustomer: Customer ==> ()
	addCustomer(c) == customers := customers munion {c.getName() |-> c}
	pre c not in set rng customers;
	
	public addMerchant: Merchant ==> ()
	addMerchant(m) == merchants := merchants munion {m.getName() |-> m}
	pre m not in set rng merchants;
	
	public removeCustomer: CustomerName ==> Customer
	removeCustomer(n) == (
		dcl customer: Customer := self.getCustomer(n);
		customers := {n} <-: customers;
		return customer;
	) pre n in set dom customers;
	
	public removeMerchant: MerchantName ==> Merchant
	removeMerchant(n) == (
		dcl merchant: Merchant := self.getMerchant(n);
		merchants := {n} <-: merchants;
		return merchant;
	) pre n in set dom merchants;	
	
	public getCustomer: CustomerName ==> Customer
	getCustomer(n) == return customers(n)
	pre n in set dom customers;
	
	public getMerchant: MerchantName ==> Merchant
	getMerchant(n) == return merchants(n)
	pre n in set dom merchants;	
	
	public purchase: Currency * CustomerName * MerchantName * ProductName * nat1 ==> ()
	purchase(currency,c,m,p,quantity) == (
		dcl customer: Customer := removeCustomer(c);
		dcl merchant: Merchant := removeMerchant(m);
		dcl product: Product := merchant.removeProduct(p);
		dcl cost: real := product.getPrice() * quantity;
		dcl discount: real := 1.0 - product.getDiscount();
		dcl fee: real := 1 - merchant.getFee();
		product.setStock(product.getStock() - quantity);
		if(currency = <Credit>) then
			customer.setCredits(customer.getCredits() - cost);	
		if(currency = <Money>) then (
			customer.setBalance(customer.getBalance() - cost * discount);
			merchant.setBalance(merchant.getBalance() + cost * fee);
		);
		merchant.addProduct(product);
		addMerchant(merchant);
		addCustomer(customer);
	);
	
functions

traces

end Network