class Merchant is subclass of User
types
	public ProductName = Product`ProductName;
	public NetworkBonus = Network`NetworkBonus;
values

instance variables
	bonus: NetworkBonus := 0;
	products: map ProductName to Product := {|->};
		
operations
	public Merchant: Merchant * UserName * UserBalance ==> Merchant
	Merchant(r,n,b) == (r.incrementReferrals(); name := n; setBalance(b); return self);
	
	public Merchant: UserName * UserBalance ==> Merchant
	Merchant(n,b) == (name := n; balance := b; return self);	
	
	pure public getProduct: ProductName ==> Product
	getProduct(n) == return products(n)
	pre n in set dom products;
	
	pure public getProducts: () ==> set of Product
	getProducts() == return rng products;
	
	public addProduct: Product ==> ()
	addProduct(p) == products := products munion {p.getName() |-> p}
	pre p.getName() not in set dom products;
	
	public removeProduct: ProductName ==> ()
	removeProduct(n) == products := {n} <-: products
	pre n in set dom products;
	
	pure public getBonus: () ==> NetworkBonus
	getBonus() == return bonus;
	
	public incrementReferrals: () ==> ()
	incrementReferrals() == (
		dcl nr_referrals: nat := 10 * bonus / (1 - bonus);
		nr_referrals := nr_referrals + 1;
		bonus := nr_referrals / (nr_referrals + 10);
	);

end Merchant
